name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    branches: [main, develop]
    types: 
      - completed

jobs:
  deploy-staging:
    name: Deploy to Staging
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'develop' }}
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v3
        with:
          ref: develop
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install Backend Dependencies
        working-directory: ./backend
        run: npm ci
        
      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: npm ci
          
      - name: Build Frontend
        working-directory: ./frontend
        run: npm run build
          
      - name: Deploy to Staging Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /var/www/taskmanager
            git pull origin develop
            cd backend
            npm ci
            pm2 restart taskmanager-api
            cd ../frontend
            npm ci
            npm run build
            
      - name: Run Integration Tests
        working-directory: ./backend
        run: npm test
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          NODE_ENV: staging
          
  deploy-production:
    name: Deploy to Production
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' }}
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v3
        with:
          ref: main
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install Backend Dependencies
        working-directory: ./backend
        run: npm ci
        
      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: npm ci
          
      - name: Build Frontend
        working-directory: ./frontend
        run: npm run build
          
      - name: Prepare Blue Deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            mkdir -p /var/www/taskmanager-blue
            
      - name: Deploy to Blue Environment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /var/www/taskmanager-blue
            git pull origin main
            cd backend
            npm ci
            cd ../frontend
            npm ci
            npm run build
            
      - name: Switch to Blue Environment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /var/www
            rm -rf taskmanager-green
            mv taskmanager taskmanager-green
            mv taskmanager-blue taskmanager
            cd taskmanager/backend
            pm2 restart taskmanager-api
            
      - name: Verify Deployment
        run: |
          echo "Verifying deployment..."
          curl -sSf http://${{ secrets.PRODUCTION_HOST }}/health || (echo "Deployment verification failed, rolling back" && exit 1)
          
      - name: Rollback on Failure
        if: failure()
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /var/www
            rm -rf taskmanager-blue
            mv taskmanager taskmanager-blue
            mv taskmanager-green taskmanager
            cd taskmanager/backend
            pm2 restart taskmanager-api 